Function Get-VBRMalwareDetectionLogs
{
    <#
    .SYNOPSIS
        Parses the events from Veeam's malware detection logs into PowerShell objects.

    .PARAMETER Path
        The path to one or more Veeam log files.

    .PARAMETER ComputerName
        Return malware detection events for the given computer.

    .EXAMPLE
        Get-VBRMalwareDetectionLogs

    .EXAMPLE
        Get-VBRMalwareDetectionLogs -Path C:\ProgramData\Veeam\Backup\Malware_detection_logs\*

    .EXAMPLE
        Get-VBRMalwareDetectionLogs -Path C:\ProgramData\Veeam\Backup\Malware_detection_logs\suspicious_files_24-01-29.log

    .EXAMPLE
        Get-VBRMalwareDetectionLogs -Path C:\ProgramData\Veeam\Backup\Malware_detection_logs\suspicious_files_24-01-29.txt -ComputerName MyComputer

    .NOTES
        Raymond Jette
        1/29/2024
    #>
    [CmdletBinding()]
    Param(
        [ValidateNotNullOrEmpty()]
        [string[]] $Path = 'C:\ProgramData\Veeam\Backup\Malware_detection_logs\*',

        [ValidateNotNullOrEmpty()]
        [string] $ComputerName
    )
    try {
        Get-ChildItem -Path $Path -ErrorAction 'Stop' | Where-Object {$_.Name -match "^suspicious_files_.*\.log$"} | Get-Content |
            ForEach-Object {
                if ($_ -match '^\[\d{2}\.\d{2}\.\d{4}') {
                    $split = $_ -split '\s+'
                    $colonSplit = $split[5] -split ':'

                    # extract the date and time values and store them as a datatime object.
                    $dateTime = ($split[0] -replace '\[', '') + ' ' +
                                ($split[1] -replace '\]', '')
                    $dateTime = [datetime]::parseexact($dateTime, 'dd.MM.yyyy HH:mm:ss.fff', $null)

                    $hostName = $colonSplit[0]
                    $fileMatch = [regex]::matches($_, ':(\w:.*)\.([^.]+$)')
                    $results = [PSCustomObject]@{
                        DateTime  = $dateTime
                        Level     = $split[3]
                        HostName  = $hostName
                        FileName = $fileMatch.groups.value[1] + '.' + $fileMatch.groups.value[2]
                        Extension = $fileMatch.groups.value[2]
                    }

                    if ($PSBoundParameters.containsKey('ComputerName')) {
                        $results = $results | Where-Object {$_.HostName -eq $ComputerName}

                    }

                   $results

                }
        }  
    }
    catch {
        Write-Error -Message $_.Exception.Message
    }
}