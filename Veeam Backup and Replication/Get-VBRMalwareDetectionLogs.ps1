Function Get-VBRMalwareDetectionLogs
{
    <#
    .SYNOPSIS
        Parse Veeam's malware detection log files and extracts relevant event information into PowerShell objects.

    .DESCRIPTION
        This function reads Veeam malware detection log files,extracts the date, time, host, file name, and extension, and formats these into structured PowerShell objects.
        The function can also filter the logs by a specific computer name if provided.

    .PARAMETER Path
        The file path or wildcard pattern to one or more Veeam malware detection log files.
        Default is set to 'C:\ProgramData\Veeam\Backup\Malware_detection_logs\*' if not specified.

    .PARAMETER ComputerName
        Filters the results to only include logs from the specified computer.  This parameter is optional.

    .EXAMPLE
        Get-VBRMalwareDetectionLogs
        Retrieves malware detection logs from the default directory (C:\ProgramData\Veeam\Backup\Malware_detection_logs\*).

    .EXAMPLE
        Get-VBRMalwareDetectionLogs -Path 'C:\ProgramData\Veeam\Backup\Malware_detection_logs\*'
        Retrieves all malware detection logs from the specified path.

    .EXAMPLE
        Get-VBRMalwareDetectionLogs -Path 'C:\ProgramData\Veeam\Backup\Malware_detection_logs\suspicious_files_24-01-29.log'
        Retrieves malware detection events from a specific log file.

    .EXAMPLE
        Get-VBRMalwareDetectionLogs -Path 'C:\ProgramData\Veeam\Backup\Malware_detection_logs\suspicious_files_24-01-29.txt' -ComputerName 'MyComputer'
        Retrieves malware detection events for 'MyComputer' from the specified log file.

    .NOTES
        Raymond Jette
        Last Updated: 1/30/2025
    #>
    [CmdletBinding()]
    Param(
        # Path to log files, defaults to the Veeam logs folder if not specified
        [ValidateNotNullOrEmpty()]
        [string[]] $Path = 'C:\ProgramData\Veeam\Backup\Malware_detection_logs\*',

        # Optional parameter to filter by computer name
        [ValidateNotNullOrEmpty()]
        [string] $ComputerName
    )
    try {
        # Get all the files in the specified path that match the suspicious log file pattern
        $logFiles = Get-ChildItem -Path $Path -ErrorAction 'Stop' | Where-Object {
            $_.Name -match "^suspicious_files_.*\.log$"
        }

        # Read the contents of each log file
        $logFiles | ForEach-Object {
            Get-Content $_ | ForEach-Object {
                # If the line matches the expected date/time pattern, process it
                if ($_ -match '^\[\d{2}\.\d{2}\.\d{4}') {
                    $split = $_ -split '\s+'
                    $colonSplit = $split[5] -split ':'

                    # Extract the date and time as a DateTime object
                    $dateTime = ($split[0] -replace '\[', '') + ' ' +
                                ($split[1] -replace '\]', '')
                    $dateTime = [datetime]::parseexact($dateTime, 'dd.MM.yyyy HH:mm:ss.fff', $null)

                    # Extract the host name
                    $hostName = $colonSplit[0]

                    # Use a regular expression to extract the full file path and its extension
                    $fileMatch = [regex]::matches($_, ':(\w:.*)\.([^.]+$)')

                    # Create a custom object to store the extracted information
                    $results = [PSCustomObject]@{
                        DateTime  = $dateTime
                        Level     = $split[3]
                        HostName  = $hostName
                        FileName = $fileMatch.groups.value[1] + '.' + $fileMatch.groups.value[2]
                        Extension = $fileMatch.groups.value[2]
                    }

                    # If the ComputerName parameter is provided, filter the results by hostname
                    if ($PSBoundParameters.containsKey('ComputerName')) {
                        $results = $results | Where-Object {$_.HostName -eq $ComputerName}
                    }
                   $results
                }
            }
        }  
    }
    catch {
        # Catch and display any errors during execution
        Write-Error -Message $_.Exception.Message
    }
}